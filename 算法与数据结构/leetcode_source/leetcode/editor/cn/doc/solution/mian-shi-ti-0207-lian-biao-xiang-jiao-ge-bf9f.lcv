![image.png](https://pic.leetcode.cn/1695126244-zeknYl-image.png)
想法也很简单，主要知道它们相交之后后面的长度一定都相同，这是一个充分条件，也基于此解题。

* 

```
public class Solution {

   public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode curA = headA;
        ListNode curB = headB;
        int lenA = 0;
        int lenB = 0;

        // 计算链表A和链表B的长度
        while (curA != null) {
            lenA++;
            curA = curA.next;
        }
        while (curB != null) {
            lenB++;
            curB = curB.next;
        }

        // 将curA和curB重新指向链表头节点
        curA = headA;
        curB = headB;

        // 将较长的链表指针向后移动，使两个链表剩余长度相等
        if (lenA > lenB) {
            for (int i = 0; i < lenA - lenB; i++) {
                curA = curA.next;
            }
        } else {
            for (int i = 0; i < lenB - lenA; i++) {
                curB = curB.next;
            }
        }

        // 同时遍历两个链表，找到相交节点
        while (curA != null && curB != null) {
            if (curA == curB) {
                return curA;
            }
            curA = curA.next;
            curB = curB.next;
        }

        return null; // 没有相交节点
    }

}
```

